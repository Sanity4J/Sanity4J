Sanity4J Maven plugin user guide

* Intoduction

  Sanity4J has been created in order to simplify running ad-hoc static code 
  analysis over Java projects using a standardised set of rules types and priorities.

  Various tools are used to conduct the analysis, each with their own set of
  requirements. Both bytecode and source code are analysed, to ensure the best
  chance of finding potential problems. Sanity4J presents a single interface 
  to run all the tools and produce a combined report presenting all the findings 
  in a easily accessible manner.

* Integrating Sanity4J into your Maven project.

  To run the Maven Plugin, you will need the following:

	* The Sanity4J jar & POM.
	
	* Maven 2+
	
	* JDK/JRE 1.5.x+
	
	* A directory containing the tools needed by Sanity4J (see parameters below).
	
	* A Maven project, optionally with a Cobertura plugin already included.
	
	* Depending on the size of your project, you may need to increase the memory available to 
	  Maven. This can be set using the MAVEN_OPTS environment variable, e.g. "<<<set MAVEN_OPTS=-Xmx512M>>>" 
	  to use 512MB max heap.

** Parameters

*------------------------+--------------------------------------------------------+-----------+
|| Parameter             || Description                                           || Required |
*------------------------+--------------------------------------------------------+-----------+
| productsDir            | The productsDir must point to a directory containing   | Yes       | 
|                        | all the tools in use. For example, with a default      |           |
|                        | configuration, these could be findbugs-1.3.9,          |           |
|                        | pmd-4.2.5, checkstyle-4.4 and cobertura-1.9.2.         |           |
*------------------------+--------------------------------------------------------+-----------+
| reportDir              | The report output directory. This parameter defaults   | No        |
|                        | to the project's site directory.                       |           | 
*------------------------+--------------------------------------------------------+-----------+
| coverageDataFile       | The location of a coverage data file (e.g.             | No        |
|                        | cobertura.ser for Cobertura) if you want to include    |           |
|                        | unit testing coverage data in your report. If this     |           |
|                        | parameter is omitted, it is assumed that the default   |           |
|                        | Cobertura data file will be used.                      |           |
*------------------------+--------------------------------------------------------+-----------+
| javaRuntime            | The full path to the java run-time to use.             | No        | 
|                        | If not specified, "java" is used.                      |           |
*------------------------+--------------------------------------------------------+-----------+
| summaryDataFile        | The location of a (persistent) summary data file if    | No        | 
|                        | you want to include trend graphs over time.            |           |
*------------------------+--------------------------------------------------------+-----------+
| includeToolOutput      | If set to "true", the raw tool xml output is also      | No        | 
|                        | copied into the report directory. This is only useful  |           |
|                        | if there is some other part of your build process that |           |
|                        | requires it.                                           |           |
*------------------------+--------------------------------------------------------+-----------+
| sources                | This element accepts nested Paths pointing             | No        | 
|                        | to the location of the target project's source only.   |           |
|                        | If you have multiple source directories contained      |           |
|                        | within a main directory, you can just list the main    |           |
|                        | directory here - the task will search for all source   |           |
|                        | directories. The default is to use the project's "src" |           |
|                        | directory.                                             |           |
*------------------------+--------------------------------------------------------+-----------+
| classes                | This element accepts nested paths pointing to          | No        |
|                        | the location of the target project's built             |           |
|                        | classes/jars only. The default is to use the project's |           |
|                        | "target/classes" and "target/test-classes"             |           |
|                        | directories.                                           |           |
*------------------------+--------------------------------------------------------+-----------+
| libraries              | This element accepts nested Paths / FileSets pointing  | No        |
|                        | to the location of jars/classes that the target        |           |
|                        | project depends on. Don't use e.g. an entire local     |           |
|                        | maven repository; only include direct dependencies.    |           |  
|                        | The default is to use the project's test class path.   |           |
*------------------------+--------------------------------------------------------+-----------+

  The source / class / library paths will accept multiple path entries. If there are multiple 
  source / class directories, it is possible to specify a common parent directory and have the tool 
  find all the nested source/class directories.

  The products.dir must point to a directory containing all the tools in use. For example, with 
  a default configuration, these could be findbugs-1.3.9, pmd-4.2.5, checkstyle-4.4 and 
  cobertura-1.9.2         

  Below is the minimal amount of XML necessary to integrate Sanity4J into your project's POM.

+-------------------------------+
  <reporting>
    <plugins>
      ...
      <plugin>
        <groupId>net.sf.sanity4j</groupId>
        <artifactId>sanity4j</artifactId>
        <version>1.0</version>
                
        <configuration>
          <!-- Replace the following parameter with the location of the analysis tools --> 
          <productsDir>/javaTools</productsDir>
        </configuration>
      </plugin>
      ...
    </plugins>
  </reporting>
+-------------------------------+
