Customising Sanity4J analysis

  The analysis can be customised using an external configuration file. On start-up, Sanity4J
  attempts to read external configuration from a standard Java properties file named 
  "<<<sanity4j.properties>>>" located in the working directory or the user's home directory.
  (The location of the file can be further specificed by using the <<<externalPropertiesPath>>>.)

* Customising which tools are run.

  The "<<<sanity4j.toolsToRun>>>" property controls which tools will be run by Sanity4J. Multiple tools
  can be listed here, in a comma-separated list. The Available tools are listed in the table below.
 
*-----------------+-------------------------------------------------------+---------------------------------------------------------+------------------------------+
||ID              || Tool name                                            || Description                                            || Supported versions          |
*-----------------+-------------------------------------------------------+---------------------------------------------------------+------------------------------+
| checkstyle      | {{{http://checkstyle.sourceforge.net}Checkstyle}}     | Static source code analyser.                            | 4.4                          |
| cobertura-merge | {{{http://cobertura.sourceforge.net}Cobertura Merge}} | Merges multiple datafiles before the coverage analysis. | 1.9.2                        |
| cobertura       | {{{http://cobertura.sourceforge.net}Cobertura}}       | Unit test coverage analysis.                            | 1.8, 1.9, 1.9.2              |
| findbugs        | {{{http://findbugs.sourceforge.net}FindBugs}}         | Static byte-code analyser.                              | 1.3.9                        |
| pmd             | {{{http://pmd.sourceforge.net/}PMD}}                  | Static source code analyser.                            | 4.2.1, 4.2.2, 4.2.5          |
| pmd-cpd         | {{{http://pmd.sourceforge.net/}PMD CPD}}              | Detects copy & pasted source code.                      | 4.2.1, 4.2.2, 4.2.5          |
*-----------------+-------------------------------------------------------+---------------------------------------------------------+------------------------------+

  The default value for this parameter is:
  
+---------------------------------------------------------------------------+
sanity4j.toolsToRun=checkstyle,cobertura-merge,cobertura,findbugs,pmd,pmd-cpd
+---------------------------------------------------------------------------+

* Customising tool configuration.

  The default configuration of each tool may not be appropriate to your project, so tool options can
  be modified as necessary e.g. to modify the rules in use or adjust performance options. Since each
  tool is launched in its own separate process, launch options for each tool can be modified 
  individually using a parameter of the form: <<<sanity4j.tool.<tool id>.<version>.command>>>. 
 
  Variable substitution is available for tool locations and command lines. For 
  example, $\{java\} will be replaced by the path to the JRE executable. The Variables available are 
  detailed in the table below.
   
*------------------------+-----------------------------------------------------------------------------+
|| Variable              || Value                                                                      |
*------------------------+-----------------------------------------------------------------------------+
| java                   | Path to JRE executable.                                                     |
| javaArgs               | JRE arguments (memory, classpath, defines).                                 |
| products               | The location of the tools directory.                                        |
| source                 | The path to the directory containing the combined sources to be analysed.   |
| classes                | The path to the directory containing the combined classes to be analysed.   |
| libs                   | The path to the directory containing the combined libraries to be analysed. |
| coverageDataFile       | The unit test coverage data file.                                           |
| coverageMergeDataFiles | The list of unit test coverage data files.                                  |
| tempDir                | The temporary directory location.                                           |
| File.separatorChar     | OS-specific File path separator character.                                  |
| File.pathSeparator     | OS-specific path separator character.                                       |
| outputFile             | The location where the tool should place it's output.                       |
| toolHome               | The home directory for the tool (not available for ".home" properties).     |
*------------------------+-----------------------------------------------------------------------------+
 
  Here is an example of configuring Checkstyle 4.4 to only use the Sun Code Conventions:
 
+-------------------------------+
sanity4j.tool.checkstyle.4.4.command="${java}" ${javaArgs} com.puppycrawl.tools.checkstyle.Main
-c "${toolHome}${File.separatorChar}sun_checks.xml" -f xml -o "${outputFile}" -r ${source}
+-------------------------------+
 
* Customising issue categories and severities.

  Issue weightings and exclusions can be adjusted in settings files for each individual tool 
  (where supported) or centrally in the external Sanity4J property file. The names for each 
  parameter are of the form <<< <source>.<ruleName>.<option> >>>.
  
  The "<<<source>>>" corresponds to the tool which generates the issue. Possible values are
  "<<<Findbugs>>>", "<<<PMD>>>" and "<<<Checkstyle>>>".
  
  The "<<<ruleName>>>" is the tool-specific name of the rule which generates the issue (e.g. <<<NP_LOAD_OF_KNOWN_NULL_VALUE>>>).
  
  The "<<<option>>>" must be one of the following: 
  
   * The "category" option is used to set category paths. A category path is a text string, 
     with path elements delimited by '/'. Multiple paths may be supplied, delimited by commas.
     For example, the value "Style,Maintenance/Code Size" would place issues under the 
     categories "Style" and "Maintenance" --> "Code Size"

   * The "severity" option is used to set the issue severity. The parameter's value must be 
     0-4 (0=info, 1=low, 2=moderate, 3=significant, 4=high).

   * The "includes" option controls which Java class names should have the rule applied to 
     them. All files are included by default. The parameter value should be a comma-delimited 
     list of class names to include, using java regular expressions. 

   * The "excludes" option controls which Java class names should be excluded from this rule. 
     A class is excluded if it is matched by at least one exclude. The default exclude is 
     nothing. The parameter's value should be a comma-delimited list of class names to exclude.

  The following example shows parameters to exclude jUnit 3.x tests from CheckStyle's 
  magic-number check, and set the severity for this issue in other classes to low.

+-----------------------------------------------------+
Checkstyle.MagicNumberCheck.severity=1
Checkstyle.MagicNumberCheck.excludes=Test[A-Z].*,.*Test
+-----------------------------------------------------+

* Customising report output.

  The weighting for the quality metric can be modified if necessary. The default weighting is shown below. 
  
+-------------------------------+
sanity4j.report.metric.quality.expression=1.0 - ((#highCount * 100.0 + #significantCount * 20.0 +
#moderateCount * 5.0 + #lowCount * 2.0 + #infoCount * 0.0) / #linesOfCode)
+-------------------------------+
